@using System.Threading
@inject HubConnection hubConnection
@implements IAsyncDisposable

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <Authorizing>
                    <MudContainer>
                        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
                    </MudContainer>
                </Authorizing>
                <NotAuthorized>
                    @if (!context.User.Identity.IsAuthenticated)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p>You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    private CancellationTokenSource cts = new CancellationTokenSource();

    protected override void OnInitialized()
    {
        #pragma warning disable 4014
        ConnectWithRetryAsync(cts.Token);
        #pragma warning restore 4014
        
        hubConnection.Closed += error =>
        {
            return ConnectWithRetryAsync(cts.Token);
        };
    }

    private async Task<bool> ConnectWithRetryAsync(CancellationToken token)
    {
        while (true)
        {
            try
            {
                await hubConnection.StartAsync(token);
                return true;
            }
            catch when (token.IsCancellationRequested)
            {
                return false;
            }
            catch
            {
                await Task.Delay(5000);
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        cts.Cancel();
        cts.Dispose();
        await hubConnection.DisposeAsync();
    }
}