@namespace VeloTimerWeb.Client.Shared
@using VeloTimer.Shared.Hub
@inherits ComponentBase
@inject HttpClient Http
@inject IApiClient Api
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection

<MudText Color="Color.Inherit" Typo="Typo.h6" Align="Align.Center">@StatsItem</MudText>

@if (segmentTimes == null)
{
<MudTable Items="@_placeholder" Breakpoint="Breakpoint.None">
    <HeaderContent>
        @if (!string.IsNullOrWhiteSpace(_rider))
        {
            <MudTh>Dato</MudTh>
        }
        else
        {
            <MudTh Class="mw-100">Rytter</MudTh>
        }
        <MudTh>Tid</MudTh>
        <MudTh>Fart</MudTh>
    </HeaderContent>
    <RowTemplate>
        @if(!string.IsNullOrWhiteSpace(_rider))
        {
            <MudTd DataLabel="Dato"><MudSkeleton/></MudTd>
        }
        else
        {
            <MudTd DataLabel="Rytter"><MudSkeleton/></MudTd>
        }
        <MudTd DataLabel="Tid"><MudSkeleton/></MudTd>
        <MudTd DataLabel="Fart"><MudSkeleton/></MudTd>
    </RowTemplate>
</MudTable>    
}
else
{
<MudTable Items="@segmentTimes" Loading="@_loading" LoadingProgressColor="@Color.Info" Breakpoint="Breakpoint.None">
    <HeaderContent>
        @if (!string.IsNullOrWhiteSpace(_rider))
        {
            <MudTh>Dato</MudTh>
        }
        else
        {
            <MudTh Class="mw-100">Rytter</MudTh>
        }
        <MudTh Style="text-align:right">Tid</MudTh>
        <MudTh Style="text-align:right">Fart</MudTh>
    </HeaderContent>
    <RowTemplate>
        @if(!string.IsNullOrWhiteSpace(_rider))
        {
            <MudTd DataLabel="Dato">@context.PassingTime.LocalDateTime</MudTd>
        }
        else
        {
            <MudTd DataLabel="Rytter">@context.Rider</MudTd>
        }
        <MudTd DataLabel="Tid" Style="text-align:right">@Formatters.FormatTime(context.Time)</MudTd>
        <MudTd DataLabel="Fart" Style="text-align:right">@String.Format("{0:00.000}", context.Speed)</MudTd>
    </RowTemplate>
</MudTable>
}

@code {
    protected IEnumerable<SegmentTime> segmentTimes;
    private int[] _placeholder = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

    [Parameter]
    public string StatsItem { get; set; }
    [Parameter]
    public DateTimeOffset? FromTime { get; set; }
    [Parameter]
    public DateTimeOffset? ToTime { get; set; }
    [Parameter]
    public int Count { get; set; }
    [Parameter]
    public string Rider { get; set; }
    [Parameter]
    public bool OnePerRider { get; set; } = false;

    private string _statsitem;
    protected DateTimeOffset? fromtime;
    protected DateTimeOffset? totime;
    protected int count;
    private string _rider;
    private bool _loading = true;

    protected async override Task OnParametersSetAsync()
    {
        if (StatsItem != _statsitem || Count != count || Rider != _rider) {
            _loading = true;

            fromtime = FromTime?.ToUniversalTime();
            totime = ToTime?.ToUniversalTime();
            count = Count;
            _rider = Rider;

            await LoadTimes();
        }
    }

    protected async Task LoadTimes()
    {
        _loading = true;
        segmentTimes = await Api.GetBestTimes(StatsItem.ToLower(), fromtime, totime, Count: count, Rider: _rider, OnePerRider: OnePerRider);

        _loading = false;
        StateHasChanged();
    }
}
        