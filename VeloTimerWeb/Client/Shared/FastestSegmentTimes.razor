@using VeloTimer.Shared.Hub
@using VeloTimer.Shared.Models
@using VeloTimer.Shared.Util
@inherits ComponentBase
@implements IDisposable
@inject HttpClient Http
@inject IApiClient Api
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection

@if (true)
{
    <table class="table table-striped">
        <thead>
            <tr>
                @if (rider != null)
                {
                    <th scope="col" class="mw-100">Dato</th>    
                }
                else
                {
                    <th scope="col" class="mw-100">Rytter</th>    
                }
                <th scope="col" class="text-right">Tid</th>
                <th scope="col" class="text-right">Fart</th>
            </tr>
        </thead>
        <tbody>
            @if (segmentTimes == null)
            {
                <tr>
                    <td colspan="3">
                        Laster...
                    </td>
                </tr>
            }
            else
            {
                @foreach (var segment in segmentTimes)
                {
                    <tr>
                        @if (rider != null)
                        {
                            <td>@segment.PassingTime.LocalDateTime</td>
                        }
                        else
                        {
                            <td>@segment.Rider</td>    
                        }
                        <td class="text-right">@Formatters.FormatTime(segment.Time)</td>
                        <td class="text-right">@String.Format("{0:00.000}", segment.Speed)</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    protected IEnumerable<SegmentTime> segmentTimes;

    [Parameter]
    public string StatsItem { get; set; }
    [Parameter]
    public DateTimeOffset? FromTime { get; set; }
    [Parameter]
    public DateTimeOffset? ToTime { get; set; }
    [Parameter]
    public int Count { get; set; }
    [Parameter]
    public string Rider { get; set; }
    [Parameter]
    public bool OnePerRider { get; set; } = false;

    protected string statsitem;
    protected DateTimeOffset? fromtime;
    protected DateTimeOffset? totime;
    protected int count;
    protected string rider;

    protected override void OnInitialized()
    {
        hubConnection.On(Strings.Events.NewPassings, async () =>
        {
            await LoadTimes();
        });
    }

    protected async override Task OnParametersSetAsync()
    {
        if (StatsItem != statsitem || Count != count || Rider != rider) {
            
            fromtime = FromTime?.ToUniversalTime();
            totime = ToTime?.ToUniversalTime();
            count = Count;
            rider = Rider;

            await LoadTimes();
        }
    }

    protected async Task LoadTimes()
    {
        segmentTimes = await Api.GetBestTimes(StatsItem, fromtime, totime, Count: count, Rider: rider, OnePerRider: OnePerRider);

        StateHasChanged();
    }

    //protected void ToogleIntermediates()
    //{
    //    showintermediate = !showintermediate;
    //}

    public void Dispose()
    {
        //hubConnection.Remove(Strings.Events.NewPassings);
        //if (segment != null)
        //{
        //    hubConnection.InvokeAsync("RemoveFromSegmentGroup", segment.Id);
        //}
    }
}
        