@namespace VeloTimerWeb.Client.Shared
@using VeloTimer.Shared.Hub
@using VeloTimer.Shared.Util

@inject IApiClient Api
@inject ISnackbar SnackBar
@inject HttpClient Http

@if(!active)
{
    <MudPaper>
        <MudLink Href="/rider/transponders">Ingen aktiv brikke!</MudLink>
    </MudPaper>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private bool active;
    private string userId;

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        userId = user.FindFirst(c => c.Type == "sub")?.Value;

        active = true;
    }

    protected async override Task OnParametersSetAsync()
    {
        var transpondernames = await Http.GetFromJsonAsync<IEnumerable<TransponderOwnershipWeb>>($"rider/{userId}/transponders");

        active = transpondernames.Any() && transpondernames.Select(t => t.OwnedFrom <= DateTime.UtcNow && t.OwnedUntil > DateTime.UtcNow).Any();

        if (!active)
        {
            SnackBar.Add("Ingen aktive brikke!", Severity.Error);
        }
    }
}