@using VeloTimer.Shared.Hub
@using VeloTimer.Shared.Models
@inherits ComponentBase
@implements IDisposable
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection

@if (segment != null && segment.Start != null && segment.End !=null)
{
    @if (segment.Intermediates.Count() > 0 && !ShowIntermediate.HasValue)
    {
        <button class="btn" @onclick="ToogleIntermediates">@(showintermediate ? "Hide" : "Show") intermediate times</button>
    }
    
    @if (segmentTime != null)
    {
        <div>
            @segment.Label -- @segmentTime.Rider - @String.Format("{0:00.000}", segmentTime.Segmentspeed) - @String.Format("{0:00.000}", segmentTime.Segmenttime)
        </div>
    }
}

@code {
    protected SegmentTimeRider segmentTime;

    [Parameter]
    public long Segment { get; set; }
    [Parameter]
    public long? Transponder { get; set; }
    [Parameter]
    public bool? ShowIntermediate { get; set; }
    [Parameter]
    public DateTimeOffset? FromTime { get; set; }
    [Parameter]
    public DateTimeOffset? ToTime { get; set; }
    [Parameter]
    public bool RequireIntermediates { get; set; } = true;

    protected Segment segment;
    protected long? transponder;
    protected bool showintermediate = false;
    protected DateTimeOffset? fromtime;
    protected DateTimeOffset? totime;
    protected int count = 1;
    protected bool requireintermediates;

    protected override void OnInitialized()
    {
        hubConnection.On(Strings.Events.NewSegmentRun, async () =>
        {
            await LoadSegmentTimes();
        });
    }

    protected async override Task OnParametersSetAsync()
    {
        if (Segment != segment?.Id || Transponder != transponder) {
            if (segment != null)
            {
                await hubConnection.InvokeAsync("RemoveFromSegmentGroup", segment.Id);
            }

            segment = await Http.GetFromJsonAsync<Segment>($"/segments/{Segment}");

            segment.Start = await Http.GetFromJsonAsync<TimingLoop>($"/timingloops/{segment.StartId}");
            segment.End = await Http.GetFromJsonAsync<TimingLoop>($"/timingloops/{segment.EndId}");

            foreach (var intermediate in segment.Intermediates)
            {
                intermediate.Loop = await Http.GetFromJsonAsync<TimingLoop>($"/timingloops/{intermediate.LoopId}");
            }

            transponder = Transponder;
            fromtime = FromTime?.ToUniversalTime();
            totime = ToTime?.ToUniversalTime();
            requireintermediates = RequireIntermediates;

            if (totime == null)
            {
                await hubConnection.InvokeAsync("AddToSegmentGroup", segment.Id);
            }

            await LoadSegmentTimes();
        }

        if (ShowIntermediate.HasValue)
        {
            showintermediate = ShowIntermediate.Value;
        }
    }

    protected async Task LoadSegmentTimes()
    {
        var segmentTimes = await Http.GetFromJsonAsync<SegmentTimeRider[]>(
            $"/segments/fastest?segmentId={segment.Id}"
            + $"&transponderid={transponder}"
            + $"&fromtime={fromtime?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")}"
            + $"&totime={totime?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")}"
            + $"&count={count}"
            + $"&requireintermediates={requireintermediates}");

        segmentTime = segmentTimes.FirstOrDefault();

        StateHasChanged();
    }

    protected void ToogleIntermediates()
    {
        showintermediate = !showintermediate;
    }

    public void Dispose()
    {
        hubConnection.Remove(Strings.Events.NewSegmentRun);
        if (segment != null)
        {
            hubConnection.InvokeAsync("RemoveFromSegmentGroup", segment.Id);
        }
    }
}
        