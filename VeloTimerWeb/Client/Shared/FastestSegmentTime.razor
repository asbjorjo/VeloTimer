@namespace VeloTimerWeb.Client.Shared
@inherits ComponentBase
@inject IApiClient Api
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection

@if (segment == null || segmentTime == null)
{
    <MudGrid>
        <MudItem xs="3" md="2">
            <MudSkeleton />
        </MudItem>
        <MudItem xs="7" md="6">
            <MudSkeleton />
        </MudItem>
        <MudItem md="2" Class="d-none d-md-flex">
            <MudSkeleton />
        </MudItem>
        <MudItem xs="2" md="2">
            <MudSkeleton />
        </MudItem>
    </MudGrid>
}
else
{
    <MudGrid Spacing="0">
        <MudItem xs="3" md="2">
            <MudText>@Label</MudText>
        </MudItem>
        <MudItem xs="7" md="6">
            <MudText>@segmentTime.Rider</MudText>
        </MudItem>
        <MudItem md="2" Class="d-none d-md-flex">
            <MudText Align="Align.Right">@Formatters.FormatSpeed(@segmentTime.Speed)</MudText>
        </MudItem>
        <MudItem xs="2" md="2">
            <MudText Align="Align.Right">@Formatters.FormatTime(@segmentTime.Time)</MudText>
        </MudItem>
    </MudGrid>
}

@code {
    protected SegmentTime segmentTime;

    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public long? Transponder { get; set; }
    [Parameter]
    public bool? ShowIntermediate { get; set; }
    [Parameter]
    public DateTimeOffset? FromTime { get; set; }
    [Parameter]
    public DateTimeOffset? ToTime { get; set; }
    [Parameter]
    public bool RequireIntermediates { get; set; } = true;

    protected TrackStatisticsItemWeb segment;
    protected long? transponder;
    protected bool showintermediate = false;
    protected DateTimeOffset? fromtime;
    protected DateTimeOffset? totime;
    protected int count = 1;
    protected bool requireintermediates;

    protected async override Task OnParametersSetAsync()
    {
        if (Label != segment?.StatisticsItem.Label || Transponder != transponder) {
            segment = await Api.GetStatisticsItem(Label.ToLower(), "sola-arena");

            transponder = Transponder;
            fromtime = FromTime?.ToUniversalTime();
            totime = ToTime?.ToUniversalTime();
            requireintermediates = RequireIntermediates;

            await LoadSegmentTimes();
        }

        if (ShowIntermediate.HasValue)
        {
            showintermediate = ShowIntermediate.Value;
        }
    }

    protected async Task LoadSegmentTimes()
    {
        var segmentTimes = await Api.GetBestTimes(segment.StatisticsItem.Slug, fromtime, totime, Count: count);

        segmentTime = segmentTimes.FirstOrDefault();

        StateHasChanged();
    }

    protected void ToogleIntermediates()
    {
        showintermediate = !showintermediate;
    }
}
        