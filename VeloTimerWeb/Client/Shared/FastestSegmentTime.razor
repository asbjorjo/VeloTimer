@using VeloTimer.Shared.Hub
@using VeloTimer.Shared.Models
@using VeloTimer.Shared.Util
@inherits ComponentBase
@implements IDisposable
@inject IApiClient Api
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection

@if (segment != null)
{
    @if (segmentTime != null)
    {
        <div class="row">
            <div class="col-3 col-md-2 col-xl font-weight-bold">
            @Label
            </div>
            <div class="col-7 col-md-6 col-xl">
            @segmentTime.Rider
            </div>
            <div class="d-none d-md-block col-md-2 col-xl">
            @String.Format("{0:00.000}", segmentTime.Speed)
            </div>
            <div class="col-2 col-md-2 col-xl">
            @Formatters.FormatTime(segmentTime.Time)
            </div>
        </div>
    }
}

@code {
    protected SegmentTime segmentTime;

    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public long? Transponder { get; set; }
    [Parameter]
    public bool? ShowIntermediate { get; set; }
    [Parameter]
    public DateTimeOffset? FromTime { get; set; }
    [Parameter]
    public DateTimeOffset? ToTime { get; set; }
    [Parameter]
    public bool RequireIntermediates { get; set; } = true;

    protected TrackStatisticsItemWeb segment;
    protected long? transponder;
    protected bool showintermediate = false;
    protected DateTimeOffset? fromtime;
    protected DateTimeOffset? totime;
    protected int count = 1;
    protected bool requireintermediates;

    protected async override Task OnParametersSetAsync()
    {
        if (Label != segment?.StatisticsItem.Label || Transponder != transponder) {
            segment = await Api.GetStatisticsItem(Label.ToLower(), "sola-arena");

            transponder = Transponder;
            fromtime = FromTime?.ToUniversalTime();
            totime = ToTime?.ToUniversalTime();
            requireintermediates = RequireIntermediates;

            await LoadSegmentTimes();
        }

        if (ShowIntermediate.HasValue)
        {
            showintermediate = ShowIntermediate.Value;
        }
    }

    protected async Task LoadSegmentTimes()
    {
        var segmentTimes = await Api.GetBestTimes(segment.StatisticsItem.Slug, fromtime, totime, Count: count);

        segmentTime = segmentTimes.FirstOrDefault();

        StateHasChanged();
    }

    protected void ToogleIntermediates()
    {
        showintermediate = !showintermediate;
    }

    public void Dispose()
    {
        //hubConnection.Remove(Strings.Events.NewSegmentRun);
        //if (segment != null)
        //{
        //    hubConnection.InvokeAsync("RemoveFromSegmentGroup", segment.Id);
        //}
    }
}
        