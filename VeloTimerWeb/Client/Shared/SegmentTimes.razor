@using VeloTimer.Shared.Util
@using VeloTimer.Shared.Hub
@using VeloTimer.Shared.Models
@inherits ComponentBase
@implements IDisposable
@inject IApiClient Api
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection

@if (_segments == null || string.IsNullOrWhiteSpace(_label) || string.IsNullOrWhiteSpace(_rider))
{
    <p>Laster....</p>
}
else
{
<MudTable ServerData="@ReloadTimes" Loading="@_loading" LoadingProgressColor="Color.Info" Breakpoint="Breakpoint.None" T="SegmentTime" @ref="_table" OnRowClick="@ToggleIntermediate">
    <ToolBarContent>
        <MudSelect T="string" ValueChanged="@SegmentChanged">
            @foreach (var segment in _segments.Select(x => x.StatisticsItem.Label))
            {
                <MudSelectItem T="string" Value="@segment">@segment</MudSelectItem>
            }
        </MudSelect>
    </ToolBarContent>
    <HeaderContent>
        @if (!string.IsNullOrWhiteSpace(_rider))
        {
            <MudTh>Dato</MudTh>
        }
        else
        {
            <MudTh>Rytter</MudTh>
        }
        <MudTh>@Label</MudTh>
        <MudTh>Fart</MudTh>
    </HeaderContent>
    <RowTemplate>
        @if(!string.IsNullOrWhiteSpace(_rider))
        {
            <MudTd DataLabel="Dato">@context.PassingTime.LocalDateTime</MudTd>
        }
        else
        {
            <MudTd DataLabel="Rytter">@context.Rider</MudTd>
        }
        <MudTd DataLabel="@Label">@Formatters.FormatTime(context.Time)</MudTd>
        <MudTd DataLabel="Fart">@String.Format("{0:00.000}", context.Speed)</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <ChildRowContent>
        @if (context.ShowIntermediate)
        {
            <MudTr>
                <MudTd UserAttributes="@(new Dictionary<string, object>{{"colspan","3"}})">
                    <MudChart ChartType="ChartType.Bar" ChartSeries="@ChartIntermediates(@context.Intermediates)" ChartOptions="@(new ChartOptions{DisableLegend = true, YAxisTicks=2})" />
                    <MudGrid>
                    @foreach(var inter in @context.Intermediates)
                    {
                        <MudItem>@Formatters.FormatTime(inter.Time)</MudItem>
                    }
                    </MudGrid>
                </MudTd>
            </MudTr>
        }
    </ChildRowContent>
</MudTable>
}

@code {
    private IEnumerable<SegmentTime> segmentTimes = Enumerable.Empty<SegmentTime>();
    private IEnumerable<TrackStatisticsItem> _segments;
    private IEnumerable<SegmentTime> _pagedTimes;
    private MudTable<SegmentTime> _table;


    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public long? Transponder { get; set; }
    [Parameter]
    public DateTimeOffset? FromTime { get; set; }
    [Parameter]
    public DateTimeOffset? ToTime { get; set; }
    [Parameter]
    public int Count { get; set; }
    [Parameter]
    public string Rider { get; set; }

    protected long? transponder;
    protected string _rider;
    protected DateTimeOffset? fromtime;
    protected DateTimeOffset? totime;
    private bool _loading = true;
    private bool _hasIntermediate = true;
    private string _label = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var segments = await Api.GetStatisticsItems("1");
        _segments = segments.GroupBy(x => x.StatisticsItem.Label).Select(x => x.First()).OrderBy(x => x.StatisticsItem.Distance);
        _label = _segments.First().StatisticsItem.Label;
    }

    protected async override Task OnParametersSetAsync()
    {
        if (Label != _label || Transponder != transponder || Rider != _rider) {
            transponder = Transponder;
            fromtime = FromTime?.ToUniversalTime();
            totime = ToTime?.ToUniversalTime();
            _rider = Rider;
            _label = Label;
        }

        await base.OnParametersSetAsync();

        if (_table != null) await _table.ReloadServerData();
    }

    private async Task SegmentChanged(string segment)
    {
        _loading = true;
        _label = segment;
        await _table.ReloadServerData();
    }

    private async Task<TableData<SegmentTime>> ReloadTimes(TableState state)
    {
        var pagination = new PagingParameters
            {
                PageSize = state.PageSize,
                PageNumber = state.Page + 1
            };

        var timeData = await Api.GetTimes(_label, fromtime, totime, pagination, Rider: _rider);

        var times = timeData.Items;
        var page = timeData.Pagination;

        _hasIntermediate = (times.Any() && times.First().Intermediates.Count() > 1);

        _loading = false;
        return new TableData<SegmentTime> { TotalItems = page.TotalCount, Items = times };
    }

    private void ToogleIntermediates(SegmentTime time)
    {
        time.ShowIntermediate = !time.ShowIntermediate;
    }

    private void ToggleIntermediate(TableRowClickEventArgs<SegmentTime> trEvent)
    {
        trEvent.Item.ShowIntermediate = !trEvent.Item.ShowIntermediate;
    }

    private List<ChartSeries> ChartIntermediates(IEnumerable<Intermediate> intermediates)
    {
        List<ChartSeries> charts = new List<ChartSeries>();
        var series = new ChartSeries { Name = "tider", Data = intermediates.Select(x => x.Time).ToArray() };
        charts.Add(series);
        return charts;
    }

    public void Dispose()
    {
    }
}
        