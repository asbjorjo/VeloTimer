@using VeloTimer.Shared.Hub
@using VeloTimer.Shared.Models
@inherits ComponentBase
@implements IDisposable
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection

<table class="table">
    <thead>
        <tr>
            <th>Rider</th>
            <th>Laptime</th>
            <th>Speed</th>
        </tr>
    </thead>
    <tbody>
        @if (segmentTimes == null)
        {
            <tr>
                <td colspan="3">
                    Loading...
                </td>
            </tr>
        }
        else
        {
            @foreach (var segment in segmentTimes)
            {
                <tr>
                    <td>@segment.Rider</td>
                    <td>@String.Format("{0:00.000}", segment.Segmenttime)</td>
                    <td>@String.Format("{0:00.000}", segment.Segmentspeed)</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    protected IEnumerable<SegmentTimeRider> segmentTimes;

    [Parameter]
    public long Segment { get; set; }
    [Parameter]
    public long? Transponder { get; set; }

    protected long segment;
    protected long? transponder;

    protected override void OnInitialized()
    {
        hubConnection.On(Strings.Events.NewPassings, async () =>
        {
            await LoadSegmentTimes();
        });
    }

    protected override Task OnParametersSetAsync()
    {
        segment = Segment;
        transponder = Transponder;

        return LoadSegmentTimes();
    }

    protected async Task LoadSegmentTimes()
    {
        segmentTimes = await Http.GetFromJsonAsync<SegmentTimeRider[]>($"/segmenttimes?segmentId={segment}&transponderid={transponder}");

        StateHasChanged();
    }

    public void Dispose()
    {
        hubConnection.Remove(Strings.Events.NewPassings);
    }
}
        