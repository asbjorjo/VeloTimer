@using VeloTimer.Shared.Util
@using VeloTimer.Shared.Hub
@using VeloTimer.Shared.Models
@inherits ComponentBase
@implements IDisposable
@inject IApiClient Api
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection

@if (segment != null && segmentTimes != null && segmentTimes.Any())
{
    @*@if (segment.Intermediates.Count() > 0 && !ShowIntermediate.HasValue && segment.DisplayIntermediates)
    {
        <button class="btn" @onclick="ToogleIntermediates">@(showintermediate ? "Skjul" : "Vis") mellomtider</button>
    }*@
    <div class="table-responsive">
    
    <table class="table table-striped">
        <thead>
            <tr>
                @if (rider != null)
                {
                    <th scope="col">Dato</th>    
                }
                else
                {
                    <th scope="col">Rytter</th>    
                }
                <th>@Label</th>
                <th>Fart</th>
                @if (segmentTimes.First().Intermediates?.Count() > 1)
                {
                    for (int i = 1; i <= segmentTimes.First().Intermediates.Count(); i++)
                    {
                        <th>@($"{i}")</th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @if (segmentTimes == null)
            {
                <tr>
                    <td colspan="3">
                        Laster...
                    </td>
                </tr>
            }
            else
            {
                @foreach (var segment in segmentTimes)
                {
                    <tr>
                        @if (rider != null)
                        {
                            <td>@segment.PassingTime.LocalDateTime</td>
                        }
                        else
                        {
                            <td>@segment.Rider</td>    
                        }
                        <td>@Formatters.FormatTime(segment.Time)</td>
                        <td>@String.Format("{0:00.000}", segment.Speed)</td>
                        @if (segment.Intermediates?.Count() > 1)
                        {
                            @foreach (var intermediate in segment.Intermediates)
                            {
                                <td>@Formatters.FormatTime(intermediate.Time)</td>
                            }
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
    </div>
}

@code {
    protected IEnumerable<SegmentTime> segmentTimes;

    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public long? Transponder { get; set; }
    [Parameter]
    public bool? ShowIntermediate { get; set; }
    [Parameter]
    public DateTimeOffset? FromTime { get; set; }
    [Parameter]
    public DateTimeOffset? ToTime { get; set; }
    [Parameter]
    public int Count { get; set; }
    [Parameter]
    public string Rider { get; set; }

    protected TrackStatisticsItem segment;
    protected long? transponder;
    protected string rider;
    protected bool showintermediate = false;
    protected DateTimeOffset? fromtime;
    protected DateTimeOffset? totime;

    protected override void OnInitialized()
    {
        //hubConnection.On(Strings.Events.NewSegmentRun, async () =>
        //{
        //    await LoadSegmentTimes();
        //});
    }

    protected async override Task OnParametersSetAsync()
    {
        if (Label != segment?.StatisticsItem.Label || Transponder != transponder || Rider != rider) {
            if (segment != null)
            {
                await hubConnection.InvokeAsync("RemoveFromSegmentGroup", segment.Id);
            }

            segment = await Api.GetStatisticsItem(Label, "1");

            transponder = Transponder;
            fromtime = FromTime?.ToUniversalTime();
            totime = ToTime?.ToUniversalTime();
            rider = Rider;

            if (totime == null)
            {
                await hubConnection.InvokeAsync("AddToSegmentGroup", segment.Id);
            }

            await LoadSegmentTimes();
        }

        if (ShowIntermediate.HasValue)
        {
            showintermediate = ShowIntermediate.Value;
        } 
        //else
        //{
        //    showintermediate = segment.DisplayIntermediates;
        //}
    }

    protected async Task LoadSegmentTimes()
    {
        segmentTimes = await Api.GetTimes(segment.StatisticsItem.Label, fromtime, totime, Count: Count, Rider: rider);

        StateHasChanged();
    }

    protected void ToogleIntermediates()
    {
        showintermediate = !showintermediate;
    }

    public void Dispose()
    {
        //hubConnection.Remove(Strings.Events.NewSegmentRun);
        if (segment != null)
        {
            hubConnection.InvokeAsync("RemoveFromSegmentGroup", segment.Id);
        }
    }
}
        