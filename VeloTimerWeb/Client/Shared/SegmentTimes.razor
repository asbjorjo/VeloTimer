@namespace VeloTimerWeb.Client.Shared
@using VeloTimer.Shared.Hub
@inherits ComponentBase
@implements IDisposable
@inject IApiClient Api
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection

@if (_segments == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
}
else
{
<MudSwipeArea OnSwipe="@HandleTableSwiped">
<MudTable ServerData="@ReloadTimes" Loading="@_loading" LoadingProgressColor="Color.Info" Breakpoint="Breakpoint.None" T="SegmentTime" @ref="_table" OnRowClick="@ToggleIntermediate" Striped="true">
    <ToolBarContent>
        <MudSelect T="string" ValueChanged="@UpdateLabel" Value="@(_statisticsParameters.Label)">
            @foreach (var item in _items)
            {
                <MudSelectItem T="string" Value="@(item.Slug)">@(item.Label)</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="string" ValueChanged="@UpdateTrack" Value="@(_statisticsParameters.Track)" Disabled="@(_tracks.Count < 2)" Clearable="@(_tracks.Count > 1)">
            @foreach (var track in _tracks)
            {
                <MudSelectItem T="string" Value="@(track.Slug)">@(track.Name)</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="string" ValueChanged="@UpdateLayout" Value="@(_statisticsParameters.Layout)" Disabled="@(_layouts.Count < 2)" Clearable="@(_layouts.Count > 1)">
            @foreach (var layout in _layouts)
            {
                <MudSelectItem T="string" Value="@(layout.Slug)">@(layout.Name)</MudSelectItem>
            }
        </MudSelect>
    </ToolBarContent>
    <HeaderContent>
        @if (!string.IsNullOrWhiteSpace(_rider))
        {
            <MudTh><MudTableSortLabel SortLabel="passingtime" T="SegmentTime">Dato</MudTableSortLabel></MudTh>
        }
        else
        {
            <MudTh>Rytter</MudTh>
        }
        @if(_intermediates == 1)
        {
            <MudTh Style="text-align:right">Split</MudTh>
        }
        <MudTh Style="text-align:right"><MudTableSortLabel SortLabel="time" T="SegmentTime">@_label</MudTableSortLabel></MudTh>
        <MudTh Style="text-align:right"><MudTableSortLabel SortLabel="speed" T="SegmentTime">Fart</MudTableSortLabel></MudTh>
    </HeaderContent>
    <LoadingContent>
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large"/>
    </LoadingContent>
    <RowTemplate>
        @if(!string.IsNullOrWhiteSpace(_rider))
        {
            <MudTd DataLabel="Dato">@context.PassingTime.LocalDateTime</MudTd>
        }
        else
        {
            <MudTd DataLabel="Rytter">@context.Rider</MudTd>
        }
        @if(_intermediates == 1)
        {
            <MudTd DataLabel="Split" Style="text-align:right">@Formatters.FormatTime(context.Intermediates.First().Time)</MudTd>
        }
        <MudTd DataLabel="@_label" Style="text-align:right">@Formatters.FormatTime(context.Time)</MudTd>
        <MudTd DataLabel="Fart" Style="text-align:right">@Formatters.FormatSpeed(context.Speed)</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <ChildRowContent>
        @if (@context.ShowIntermediate)
        {
            <MudTr>
                <MudTd UserAttributes="@(new Dictionary<string, object>{{"colspan","3"}})">
                @if(_intermediates < 7){
                    <MudGrid>
                    @foreach(var inter in @context.Intermediates)
                    {
                        <MudItem>@Formatters.FormatTime(inter.Time)</MudItem>
                    }
                    </MudGrid>
                }
                else
                {
                    <MudChart ChartType="ChartType.Bar" ChartSeries="@ChartIntermediates(@context.Intermediates)" ChartOptions="@(new ChartOptions{DisableLegend = true, YAxisTicks=2})" />
                }
                </MudTd>
            </MudTr>
        }
    </ChildRowContent>
</MudTable>
</MudSwipeArea>
}

@code {
    private IEnumerable<TrackStatisticsItemWeb> _segments;
    private IEnumerable<SegmentTime> _pagedTimes;
    private MudTable<SegmentTime> _table;
    private IEnumerable<StatisticsItemWeb> _items = Enumerable.Empty<StatisticsItemWeb>();
    private List<TrackWeb> _tracks = new List<TrackWeb>();
    private List<TrackLayoutWeb> _layouts = new List<TrackLayoutWeb>();

    [Parameter]
    public string Rider { get => _rider; set => _rider = value; }
    [Parameter]
    public long? Transponder { get; set; }
    [Parameter]
    public EventCallback<StatisticsParameters> StatisticsParametersChanged { get; set; }
    [Parameter]
    public StatisticsParameters StatisticsParameters { get; set; }
    [Parameter]
    public TimeParameters TimeParameters { get => _timeParameters; set => _timeParameters = value; }

    protected long? transponder;
    protected string _rider;
    private string _label;
    private StatisticsParameters _statisticsParameters = new StatisticsParameters();
    private TimeParameters _timeParameters = new TimeParameters();
    private bool _loading;
    private bool _hasIntermediate = false;
    private int _intermediates;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _segments = await Api.GetStatisticsItems("sola-arena");
        _items = _segments.GroupBy(x => x.StatisticsItem.Label).Select(x => x.First()).OrderBy(x => x.StatisticsItem.Distance).Select(x => x.StatisticsItem).ToList();
    }

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (string.IsNullOrWhiteSpace(StatisticsParameters?.Label))
        {
            await UpdateLabel(_items.First().Slug);
        } else {
            _statisticsParameters = StatisticsParameters;
        }
    }

    private void UpdateDisplayLabel()
    {
        _label = _items.First(x => x.Slug == _statisticsParameters.Label).Label;
    }

    private async Task UpdateLabel(string label)
    {
        _statisticsParameters.Label = label;
        _tracks = _segments.Where(x => x.StatisticsItem.Slug == _statisticsParameters.Label).GroupBy(x => x.Layout.Track.Slug).Select(x => x.First()).Select(x => x.Layout.Track).ToList();
        if (_tracks.Count == 1)
        {
            await UpdateTrack(_tracks.First().Slug);
        } else {
            _layouts.Clear();
            await UpdateStatisticsParameters();
        }
        _label = _items.First(x => x.Slug == label).Label;        
    }

    private async Task UpdateTrack(string track)
    {
        _statisticsParameters.Track = track;
        _layouts = _segments.Where(x => x.StatisticsItem.Slug == _statisticsParameters.Label).Where(x => x.Layout.Track.Slug == _statisticsParameters.Track).Select(x => x.Layout).ToList();

        if (_layouts.Count == 1)
        {
            await UpdateLayout(_layouts.First().Slug);
        } else
        {
            await UpdateStatisticsParameters();
        }
    }

    private async Task UpdateLayout(string layout)
    {
        _statisticsParameters.Layout = layout;
        await UpdateStatisticsParameters();
    }

    private async Task UpdateStatisticsParameters()
    {
        if (_table != null) {
            await _table.ReloadServerData();
            _table.NavigateTo(0);
        }
        await StatisticsParametersChanged.InvokeAsync(_statisticsParameters);
    }

    private async Task<TableData<SegmentTime>> ReloadTimes(TableState state)
    {
        var pagination = new PaginationParameters
        {
            PageSize = state.PageSize,
            PageNumber = state.Page + 1
        };

        if (!string.IsNullOrEmpty(state.SortLabel))
        {
            if (state.SortDirection == SortDirection.Descending)
            {
                _statisticsParameters.OrderBy = $"{state.SortLabel.ToLower()}:desc";
            } else {
                _statisticsParameters.OrderBy = $"{state.SortLabel.ToLower()}";
            }
        }

        var timeData = await Api.GetTimes(_statisticsParameters, _timeParameters, pagination, Rider: _rider);

        var times = timeData.Items;
        var page = timeData.Pagination;

        _hasIntermediate = (times.Any() && times.First().Intermediates?.Count() > 1);
        _intermediates = _hasIntermediate ? times.First().Intermediates.Count() - 1 : 0;

        return new TableData<SegmentTime> { TotalItems = page.TotalCount, Items = times };
    }

    private void HandleTableSwiped(SwipeDirection direction)
    {
        if (direction == SwipeDirection.LeftToRight)
        {
            _table.NavigateTo(_table.CurrentPage - 1);
        }
        else if (direction == SwipeDirection.RightToLeft)
        {
            _table.NavigateTo(_table.CurrentPage + 1);
        }
    }

    private void ToggleIntermediate(TableRowClickEventArgs<SegmentTime> trEvent)
    {
        if (_hasIntermediate) trEvent.Item.ShowIntermediate = !trEvent.Item.ShowIntermediate;
    }

    private List<ChartSeries> ChartIntermediates(IEnumerable<Intermediate> intermediates)
    {
        List<ChartSeries> charts = new List<ChartSeries>();
        var series = new ChartSeries { Name = "tider", Data = intermediates.Select(x => x.Time).ToArray() };
        charts.Add(series);
        return charts;
    }

    public void Dispose()
    {
    }
}
        