@using VeloTimer.Shared.Hub
@using VeloTimer.Shared.Models
@inherits ComponentBase
@implements IDisposable
@inject IApiClient Api
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection

@if (segment != null && segment.Start != null && segment.End !=null)
{
    @if (segment.Intermediates.Count() > 0 && !ShowIntermediate.HasValue && segment.DisplayIntermediates)
    {
        <button class="btn" @onclick="ToogleIntermediates">@(showintermediate ? "Skjul" : "Vis") mellomtider</button>
    }
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Rytter</th>
                @if (showintermediate && !segment.Intermediates.Where(i => i.Loop == null).Any())
                {
                    @foreach (var intermediate in segment.Intermediates)
                    {
                        <th>@intermediate.Loop.Description</th>
                        <th>Fart</th>
                    }
                }
                <th>@segment.End.Description</th>
                <th>Fart</th>
            </tr>
        </thead>
        <tbody>
            @if (segmentTimes == null)
            {
                <tr>
                    <td colspan="3">
                        Laster...
                    </td>
                </tr>
            }
            else
            {
                @foreach (var segment in segmentTimes)
                {
                    <tr>
                        <td>@segment.Rider</td>
                        @if (showintermediate && this.segment.DisplayIntermediates && !this.segment.Intermediates.Where(i => i.Loop == null).Any())
                        {
                            @foreach (var intermediate in this.segment.Intermediates)
                            {
                                <td>
                                    @(
                                        segment.Intermediates.Where(i => i.Loop == intermediate.LoopId).Select(i => i.Segmenttime).SingleOrDefault() > 0 ? 
                                        String.Format(
                                            "{0:00.000}", 
                                            segment.Intermediates.Where(i => i.Loop == intermediate.LoopId).Select(i => i.Segmenttime).SingleOrDefault()
                                        ) : 
                                        "--"
                                    )
                                </td>
                                <td>
                                    @(
                                        segment.Intermediates.Where(i => i.Loop == intermediate.LoopId).Select(i => i.Segmenttime).SingleOrDefault() > 0 ? 
                                        String.Format(
                                            "{0:00.000}", 
                                            segment.Intermediates.Where(i => i.Loop == intermediate.LoopId).Select(i => i.Segmentspeed).SingleOrDefault()
                                        ) : 
                                        "--"
                                    )
                                </td>
                            }
                        }
                        <td>@String.Format("{0:00.000}", segment.Segmenttime)</td>
                        <td>@String.Format("{0:00.000}", segment.Segmentspeed)</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    protected IEnumerable<SegmentTimeRider> segmentTimes;

    [Parameter]
    public long Segment { get; set; }
    [Parameter]
    public long? Transponder { get; set; }
    [Parameter]
    public bool? ShowIntermediate { get; set; }
    [Parameter]
    public DateTimeOffset? FromTime { get; set; }
    [Parameter]
    public DateTimeOffset? ToTime { get; set; }
    [Parameter]
    public int Count { get; set; }
    [Parameter]
    public long? Rider { get; set; }

    protected Segment segment;
    protected long? transponder;
    protected long? rider;
    protected bool showintermediate = false;
    protected DateTimeOffset? fromtime;
    protected DateTimeOffset? totime;

    protected override void OnInitialized()
    {
        hubConnection.On(Strings.Events.NewSegmentRun, async () =>
        {
            await LoadSegmentTimes();
        });
    }

    protected async override Task OnParametersSetAsync()
    {
        if (Segment != segment?.Id || Transponder != transponder || Rider != rider) {
            if (segment != null)
            {
                await hubConnection.InvokeAsync("RemoveFromSegmentGroup", segment.Id);
            }

            segment = await Http.GetFromJsonAsync<Segment>($"segments/{Segment}");

            segment.Start = await Http.GetFromJsonAsync<TimingLoop>($"timingloops/{segment.StartId}");
            segment.End = await Http.GetFromJsonAsync<TimingLoop>($"timingloops/{segment.EndId}");

            if (segment.DisplayIntermediates) {
                foreach (var intermediate in segment.Intermediates)
                {
                    intermediate.Loop = await Http.GetFromJsonAsync<TimingLoop>($"timingloops/{intermediate.LoopId}");
                }
            }

            transponder = Transponder;
            fromtime = FromTime?.ToUniversalTime();
            totime = ToTime?.ToUniversalTime();
            rider = Rider;

            if (totime == null)
            {
                await hubConnection.InvokeAsync("AddToSegmentGroup", segment.Id);
            }

            await LoadSegmentTimes();
        }

        if (ShowIntermediate.HasValue)
        {
            showintermediate = ShowIntermediate.Value;
        } else
        {
            showintermediate = segment.DisplayIntermediates;
        }
    }

    protected async Task LoadSegmentTimes()
    {
        segmentTimes = await Api.GetSegmentTimes(segment.Id, fromtime, totime, Count: Count, RiderId: rider);

        StateHasChanged();
    }

    protected void ToogleIntermediates()
    {
        showintermediate = !showintermediate;
    }

    public void Dispose()
    {
        hubConnection.Remove(Strings.Events.NewSegmentRun);
        if (segment != null)
        {
            hubConnection.InvokeAsync("RemoveFromSegmentGroup", segment.Id);
        }
    }
}
        