@using VeloTimer.Shared.Util
@using VeloTimer.Shared.Hub
@using VeloTimer.Shared.Models
@inherits ComponentBase
@implements IDisposable
@inject IApiClient Api
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection

<MudTable Items="@segmentTimes" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        @if (rider != null)
        {
            <MudTh>Rytter</MudTh>
        }
        else
        {
            <MudTh>Dato</MudTh>
        }
        <MudTh>@Label</MudTh>
        <MudTh>Fart</MudTh>
        @if (_hasIntermediate)
        {
            <MudTh></MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        @if(rider != null)
        {
            <MudTd DataLabel="Dato">@context.PassingTime.LocalDateTime</MudTd>
        }
        else
        {
            <MudTd DataLabel="Rytter">@context.Rider</MudTd>
        }
        <MudTd DataLabel="@Label">@Formatters.FormatTime(context.Time)</MudTd>
        <MudTd DataLabel="Fart">@String.Format("{0:00.000}", context.Speed)</MudTd>
        @if (_hasIntermediate)
        {
            <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ToogleIntermediates(context.PassingTime.Ticks))">@(context.ShowIntermediate ? "Skjul":"Vis") mellomtider</MudButton></MudTd>
        }
    </RowTemplate>
    <ChildRowContent>
        @if (context.ShowIntermediate)
        {
            <MudTr>
                <td colspan="4">
                <MudGrid>
                @foreach(var inter in @context.Intermediates)
                {
                    <MudItem>@Formatters.FormatTime(inter.Time)</MudItem>
                }
                </MudGrid>
                </td>
            </MudTr>
        }
    </ChildRowContent>
</MudTable>

@*                      @if (segment.Intermediates?.Count() > 1)
                        {
                            @foreach (var intermediate in segment.Intermediates)
                            {
                                <td>@Formatters.FormatTime(intermediate.Time)</td>
                            }
                        }
*@

@code {
    protected IEnumerable<SegmentTime> segmentTimes = Enumerable.Empty<SegmentTime>();

    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public long? Transponder { get; set; }
    [Parameter]
    public bool? ShowIntermediate { get; set; }
    [Parameter]
    public DateTimeOffset? FromTime { get; set; }
    [Parameter]
    public DateTimeOffset? ToTime { get; set; }
    [Parameter]
    public int Count { get; set; }
    [Parameter]
    public string Rider { get; set; }

    protected TrackStatisticsItem segment;
    protected long? transponder;
    protected string rider;
    protected bool showintermediate = false;
    protected DateTimeOffset? fromtime;
    protected DateTimeOffset? totime;
    private bool _loading = true;
    private bool _hasIntermediate = true;

    protected override void OnInitialized()
    {
        //hubConnection.On(Strings.Events.NewSegmentRun, async () =>
        //{
        //    await LoadSegmentTimes();
        //});
    }

    protected async override Task OnParametersSetAsync()
    {
        if (Label != segment?.StatisticsItem.Label || Transponder != transponder || Rider != rider) {
            _loading = true;

            if (segment != null)
            {
                await hubConnection.InvokeAsync("RemoveFromSegmentGroup", segment.Id);
            }

            segment = await Api.GetStatisticsItem(Label, "1");

            transponder = Transponder;
            fromtime = FromTime?.ToUniversalTime();
            totime = ToTime?.ToUniversalTime();
            rider = Rider;

            if (totime == null)
            {
                await hubConnection.InvokeAsync("AddToSegmentGroup", segment.Id);
            }

            await LoadSegmentTimes();
        }

        if (ShowIntermediate.HasValue)
        {
            showintermediate = ShowIntermediate.Value;
        } 
        //else
        //{
        //    showintermediate = segment.DisplayIntermediates;
        //}
    }

    private async Task LoadSegmentTimes()
    {
        _loading = true;
        segmentTimes = await Api.GetTimes(segment.StatisticsItem.Label, fromtime, totime, Count: Count, Rider: rider);
        _loading = false;
        _hasIntermediate = (segmentTimes.Any() && segmentTimes.First().Intermediates.Count() > 1);
        StateHasChanged();
    }

    private void ToogleIntermediates(long ticks)
    {
        SegmentTime time = segmentTimes.First(x => x.PassingTime.Ticks == ticks);
        time.ShowIntermediate = !time.ShowIntermediate;
    }

    public void Dispose()
    {
        //hubConnection.Remove(Strings.Events.NewSegmentRun);
        if (segment != null)
        {
            hubConnection.InvokeAsync("RemoveFromSegmentGroup", segment.Id);
        }
    }
}
        