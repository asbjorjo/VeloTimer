@using VeloTimer.Shared.Util
@using VeloTimer.Shared.Hub
@using VeloTimer.Shared.Models
@inherits ComponentBase
@implements IDisposable
@inject IApiClient Api
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection

@if (_segments == null)
{
    <p>Laster....</p>
}
else
{
<MudTable ServerData="@ReloadTimes" Loading="@_loading" LoadingProgressColor="Color.Info" Breakpoint="Breakpoint.None" T="SegmentTime" @ref="_table" OnRowClick="@ToggleIntermediate" Striped="true">
    <ToolBarContent>
        <MudSelect T="string" ValueChanged="@UpdateLabel" Value="@(_statisticsParameters.Label)">
            @foreach (var item in _items)
            {
                <MudSelectItem T="string" Value="@(item.Slug)">@(item.Label)</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="string" ValueChanged="@UpdateTrack" Value="@(_statisticsParameters.Track)">
            @if (!string.IsNullOrWhiteSpace(_statisticsParameters.Label))
            {
                <MudSelectItem T="string" Value="@(string.Empty)"></MudSelectItem>
                @foreach (var track in _tracks)
                {
                    <MudSelectItem T="string" Value="@(track.Slug)">@(track.Name)</MudSelectItem>
                }
            }
        </MudSelect>
        <MudSelect T="string" ValueChanged="@UpdateLayout" Value="@(_statisticsParameters.Layout)">
            @if (!string.IsNullOrWhiteSpace(_statisticsParameters.Track))
            {
                <MudSelectItem T="string" Value="@(string.Empty)"></MudSelectItem>
                @foreach (var layout in _layouts)
                {
                    <MudSelectItem T="string" Value="@(layout.Slug)">@(layout.Name)</MudSelectItem>
                }
            }
        </MudSelect>
    </ToolBarContent>
    <HeaderContent>
        @if (!string.IsNullOrWhiteSpace(_rider))
        {
            <MudTh>Dato</MudTh>
        }
        else
        {
            <MudTh>Rytter</MudTh>
        }
        <MudTh>@_label</MudTh>
        <MudTh>Fart</MudTh>
    </HeaderContent>
    <RowTemplate>
        @if(!string.IsNullOrWhiteSpace(_rider))
        {
            <MudTd DataLabel="Dato">@context.PassingTime.LocalDateTime</MudTd>
        }
        else
        {
            <MudTd DataLabel="Rytter">@context.Rider</MudTd>
        }
        <MudTd DataLabel="@_label">@Formatters.FormatTime(context.Time)</MudTd>
        <MudTd DataLabel="Fart">@String.Format("{0:00.000}", context.Speed)</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <ChildRowContent>
        @if (context.ShowIntermediate)
        {
            <MudTr>
                <MudTd UserAttributes="@(new Dictionary<string, object>{{"colspan","3"}})">
                    <MudChart ChartType="ChartType.Bar" ChartSeries="@ChartIntermediates(@context.Intermediates)" ChartOptions="@(new ChartOptions{DisableLegend = true, YAxisTicks=2})" />
                    <MudGrid>
                    @foreach(var inter in @context.Intermediates)
                    {
                        <MudItem>@Formatters.FormatTime(inter.Time)</MudItem>
                    }
                    </MudGrid>
                </MudTd>
            </MudTr>
        }
    </ChildRowContent>
</MudTable>
}

@code {
    private IEnumerable<TrackStatisticsItemWeb> _segments;
    private IEnumerable<SegmentTime> _pagedTimes;
    private MudTable<SegmentTime> _table;
    private IEnumerable<StatisticsItemWeb> _items = Enumerable.Empty<StatisticsItemWeb>();
    private List<TrackWeb> _tracks = new List<TrackWeb>();
    private List<TrackLayoutWeb> _layouts = new List<TrackLayoutWeb>();

    [Parameter]
    public string Rider { get => _rider; set => _rider = value; }
    [Parameter]
    public long? Transponder { get; set; }
    [Parameter]
    public EventCallback<StatisticsParameters> StatisticsParametersChanged { get; set; }
    [Parameter]
    public StatisticsParameters StatisticsParameters { get; set; }
    [Parameter]
    public TimeParameters TimeParameters { get => _timeParameters; set => _timeParameters = value; }

    protected long? transponder;
    protected string _rider;
    private string _label;
    private StatisticsParameters _statisticsParameters = new StatisticsParameters();
    private TimeParameters _timeParameters = new TimeParameters();
    private bool _loading;
    private bool _hasIntermediate = false;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _segments = await Api.GetStatisticsItems("sola-arena");
    }

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _items = _segments.GroupBy(x => x.StatisticsItem.Label).Select(x => x.First()).OrderBy(x => x.StatisticsItem.Distance).Select(x => x.StatisticsItem);

        if (string.IsNullOrWhiteSpace(StatisticsParameters?.Label))
        {
            _statisticsParameters = new StatisticsParameters { Label = _items.First().Slug };
        } else {
            _statisticsParameters = StatisticsParameters;
        }

        UpdateDisplayLabel();
        _tracks = _segments.Where(x => x.StatisticsItem.Slug == _statisticsParameters.Label).GroupBy(x => x.TrackLayout.Track.Slug).Select(x => x.First()).Select(x => x.TrackLayout.Track).ToList();
    }

    private void UpdateDisplayLabel()
    {
        _label = _items.First(x => x.Slug == _statisticsParameters.Label).Label;
    }

    private async Task UpdateLabel(string label)
    {
        _statisticsParameters.Label = label;
        _tracks = _segments.Where(x => x.StatisticsItem.Slug == _statisticsParameters.Label).GroupBy(x => x.TrackLayout.Track.Slug).Select(x => x.First()).Select(x => x.TrackLayout.Track).ToList();
        _layouts.Clear();
        await UpdateStatisticsParameters();
    }

    private async Task UpdateTrack(string track)
    {
        _statisticsParameters.Track = track;
        _layouts = _segments.Where(x => x.StatisticsItem.Slug == _statisticsParameters.Label).Where(x => x.TrackLayout.Track.Slug == _statisticsParameters.Track).Select(x => x.TrackLayout).ToList();
        await UpdateStatisticsParameters();
    }

    private async Task UpdateLayout(string layout)
    {
        _statisticsParameters.Layout = layout;
        await UpdateStatisticsParameters();
    }

    private async Task UpdateStatisticsParameters()
    {
        await _table.ReloadServerData();
        await StatisticsParametersChanged.InvokeAsync(_statisticsParameters);
    }

    private async Task<TableData<SegmentTime>> ReloadTimes(TableState state)
    {
        var pagination = new PaginationParameters
        {
            PageSize = state.PageSize,
            PageNumber = state.Page + 1
        };

        var timeData = await Api.GetTimes(_statisticsParameters, _timeParameters, pagination, Rider: _rider);

        var times = timeData.Items;
        var page = timeData.Pagination;

        _hasIntermediate = (times.Any() && times.First().Intermediates?.Count() > 1);

        return new TableData<SegmentTime> { TotalItems = page.TotalCount, Items = times };
    }

    private void ToggleIntermediate(TableRowClickEventArgs<SegmentTime> trEvent)
    {
        trEvent.Item.ShowIntermediate = !trEvent.Item.ShowIntermediate;
    }

    private List<ChartSeries> ChartIntermediates(IEnumerable<Intermediate> intermediates)
    {
        List<ChartSeries> charts = new List<ChartSeries>();
        var series = new ChartSeries { Name = "tider", Data = intermediates.Select(x => x.Time).ToArray() };
        charts.Add(series);
        return charts;
    }

    public void Dispose()
    {
    }
}
        