@using Microsoft.Extensions.Logging;
@using VeloTimer.Shared.Hub
@using VeloTimer.Shared.Models
@using VeloTimer.Shared.Util
@using VeloTimerWeb.Client.Services
@inherits ComponentBase
@inject IApiClient Api
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection
@inject ILogger<ActiveRiders> logger

<MudPaper>
    <MudGrid>
        @if (activeriders != null)
        {
            @foreach(var rider in activeriders)
            {
                <MudItem>@rider.DisplayName</MudItem>
            }
        }
        else
        {
            <MudItem xs=12>
                <MudSkeleton />
            </MudItem>
        }
    </MudGrid>
</MudPaper>

@code {
    [Parameter]
    public DateTimeOffset FromTime { get; set; } = DateTimeOffset.Now.AddHours(-1);
    [Parameter]
    public DateTimeOffset? ToTime { get; set; }

    private IEnumerable<RiderWeb> activeriders;
    private DateTimeOffset fromtime;
    private DateTimeOffset? totime;

    protected async override Task OnParametersSetAsync()
    {
        if (FromTime != fromtime || (ToTime.HasValue && ToTime.Value != totime))
        {
            totime = ToTime.HasValue ? ToTime.Value.ToUniversalTime() : null;
            fromtime = FromTime;

            await LoadActiveTransponders();
        }
    }

    protected async Task LoadActiveTransponders()
    {
        activeriders = await Api.GetActiveRiders(fromtime, totime);
    }
}
