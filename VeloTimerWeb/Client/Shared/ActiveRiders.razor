@using VeloTimer.Shared.Hub
@using VeloTimer.Shared.Models
@using VeloTimer.Shared.Util
@inherits ComponentBase
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection

<h3>Active Riders</h3>

 @if (activetransponders is null)
{
    <p>Loading...</p>
} else
{
    if (activetransponders.Length == 0)
    {
        <p>No one on track...</p>
    } else {
        @foreach(var transponder in activetransponders)
        {
            @TransponderIdConverter.IdToCode(transponder.Id)<br/>
        }
    }
}

@code {
    [Parameter]
    public DateTimeOffset? FromTime { get; set; }
    [Parameter]
    public TimeSpan Period { get; set; } = TimeSpan.FromHours(1);

    private Transponder[] activetransponders;
    private DateTimeOffset? fromtime;
    private TimeSpan period;

    protected async override Task OnParametersSetAsync()
    {
        if (Period != period || (FromTime.HasValue && FromTime.Value != fromtime))
        {
            fromtime = FromTime.HasValue ? FromTime.Value.ToUniversalTime() : null;
            period = Period;

            await LoadActiveTransponders();
        }
    }

    protected async Task LoadActiveTransponders()
    {
        activetransponders = await Http.GetFromJsonAsync <Transponder[]>(
            $"/transponders/active?fromtime={fromtime?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")}&period={period}");
    }
}
