@using VeloTimer.Shared.Hub
@using VeloTimer.Shared.Models
@inherits ComponentBase
@implements IDisposable
@inject IApiClient Api
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection

@if (segment != null && passingcounts != null)
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Rytter</th>
                <th scope="col" class="text-right">Runder</th>
                <th scope="col" class="text-right">km</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var count in passingcounts)
        {
            <tr>
                <td>@count.Key</td>
                <td class="text-right">@count.Value</td>
                <td class="text-right">@String.Format("{0:0.00}", Distance(count.Value))</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    protected long passingcount;
    protected IEnumerable<KeyValuePair<string, int>> passingcounts;

    [Parameter]
    public string StatsItem { get; set; }
    [Parameter]
    public long? Transponder { get; set; }
    [Parameter]
    public DateTimeOffset? FromTime { get; set; }
    [Parameter]
    public DateTimeOffset? ToTime { get; set; }
    [Parameter]
    public int? Count { get; set; }
    [Parameter]
    public long? Rider { get; set; }

    protected TrackStatisticsItem segment;
    protected long? transponder;
    protected DateTimeOffset? fromtime;
    protected DateTimeOffset? totime;
    protected int count = 10;
    protected long? rider;

    protected override void OnInitialized()
    {
        hubConnection.On(Strings.Events.NewPassings, async () =>
        {
            await LoadSegmentPassingCount();
        });
    }

    protected async override Task OnParametersSetAsync()
    {
        if (StatsItem != segment?.StatisticsItem.Label || Transponder != transponder || Rider != rider) {
            if (segment != null)
            {
                await hubConnection.InvokeAsync("RemoveFromSegmentGroup", segment.Id);
            }

            segment = await Api.GetStatisticsItem(StatsItem, "1");

            transponder = Transponder;
            fromtime = FromTime?.ToUniversalTime();
            totime = ToTime?.ToUniversalTime();
            rider = Rider;

            if (totime == null)
            {
                await hubConnection.InvokeAsync("AddToSegmentGroup", segment.Id);
            }
            if (Count.HasValue)
            {
                count = Count.Value;
            }

            await LoadSegmentPassingCount();
        }

    }

    protected async Task LoadSegmentPassingCount()
    {
        var counts = await Api.GetCount(StatsItem, fromtime, totime, count);

        passingcounts = counts;

        StateHasChanged();
    }

    private double Distance(long lapcount)
    {
        return lapcount * (segment.StatisticsItem.Distance) / 1000;
    }

    public void Dispose()
    {
        hubConnection.Remove(Strings.Events.NewPassings);
        if (segment != null)
        {
            hubConnection.InvokeAsync("RemoveFromSegmentGroup", segment.Id);
        }
    }
}
        