@using VeloTimer.Shared.Hub
@using VeloTimer.Shared.Models
@inherits ComponentBase
@implements IDisposable
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection

@if (segment != null)
{
    @passingcount
}

@code {
    protected long passingcount;

    [Parameter]
    public long Segment { get; set; }
    [Parameter]
    public long? Transponder { get; set; }
    [Parameter]
    public DateTimeOffset? FromTime { get; set; }
    [Parameter]
    public TimeSpan? Period { get; set; }

    protected Segment segment;
    protected long? transponder;
    protected DateTimeOffset? fromtime;
    protected TimeSpan? period;

    protected override void OnInitialized()
    {
        hubConnection.On(Strings.Events.NewPassings, async () =>
        {
            await LoadSegmentPassingCount();
        });
    }

    protected async override Task OnParametersSetAsync()
    {
        if (Segment != segment?.Id || Transponder != transponder) {
            if (segment != null)
            {
                await hubConnection.InvokeAsync("RemoveFromTimingLoopGroup", segment.EndId);
            }

            segment = await Http.GetFromJsonAsync<Segment>($"/segments/{Segment}");

            segment.Start = await Http.GetFromJsonAsync<TimingLoop>($"/timingloops/{segment.StartId}");
            segment.End = await Http.GetFromJsonAsync<TimingLoop>($"/timingloops/{segment.EndId}");

            transponder = Transponder;
            fromtime = FromTime?.ToUniversalTime();
            period = Period;

            if (period == null)
            {
                await hubConnection.InvokeAsync("AddToTimingLoopGroup", segment.EndId);
            }

            await LoadSegmentPassingCount();
        }

    }

    protected async Task LoadSegmentPassingCount()
    {
        var counts = await Http.GetFromJsonAsync<IEnumerable<KeyValuePair<string, long>>>(
        $"/segments/passingcount?segmentId={segment.Id}"
            + $"&transponderid={transponder}"
            + $"&fromtime={fromtime?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")}"
            + $"&period={period}");
        passingcount = counts.FirstOrDefault().Value;

        StateHasChanged();
    }

    public void Dispose()
    {
        hubConnection.Remove(Strings.Events.NewPassings);
        if (segment != null)
        {
            hubConnection.InvokeAsync("RemoveFromTimingLoopGroup", segment.EndId);
        }
    }
}
        