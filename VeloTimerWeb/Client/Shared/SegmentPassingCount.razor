@using VeloTimer.Shared.Hub
@using VeloTimer.Shared.Models
@inherits ComponentBase
@implements IDisposable
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection

@if (segment != null && passingcounts != null)
{
    foreach (var count in passingcounts)
    {
        <table class="table">
            <tr>
                <td>@count.Key</td>
                <td class="text-right">@count.Value</td>
            </tr>
        </table>
    }
}

@code {
    protected long passingcount;
    protected IEnumerable<KeyValuePair<string, long>> passingcounts;

    [Parameter]
    public long Segment { get; set; }
    [Parameter]
    public long? Transponder { get; set; }
    [Parameter]
    public DateTimeOffset? FromTime { get; set; }
    [Parameter]
    public DateTimeOffset? ToTime { get; set; }
    [Parameter]
    public int? Count { get; set; }

    protected Segment segment;
    protected long? transponder;
    protected DateTimeOffset? fromtime;
    protected DateTimeOffset? totime;
    protected int count = 10;

    protected override void OnInitialized()
    {
        hubConnection.On(Strings.Events.NewPassings, async () =>
        {
            await LoadSegmentPassingCount();
        });
    }

    protected async override Task OnParametersSetAsync()
    {
        if (Segment != segment?.Id || Transponder != transponder) {
            if (segment != null)
            {
                await hubConnection.InvokeAsync("RemoveFromTimingLoopGroup", segment.EndId);
            }

            segment = await Http.GetFromJsonAsync<Segment>($"/segments/{Segment}");

            segment.Start = await Http.GetFromJsonAsync<TimingLoop>($"/timingloops/{segment.StartId}");
            segment.End = await Http.GetFromJsonAsync<TimingLoop>($"/timingloops/{segment.EndId}");

            transponder = Transponder;
            fromtime = FromTime?.ToUniversalTime();
            totime = ToTime?.ToUniversalTime();

            if (totime == null)
            {
                await hubConnection.InvokeAsync("AddToTimingLoopGroup", segment.EndId);
            }
            if (Count.HasValue)
            {
                count = Count.Value;
            }

            await LoadSegmentPassingCount();
        }

    }

    protected async Task LoadSegmentPassingCount()
    {
        var counts = await Http.GetFromJsonAsync<Dictionary<string, long>>(
        $"/segments/passingcount?segmentId={segment.Id}"
            + $"&transponderid={transponder}"
            + $"&fromtime={fromtime?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")}"
            + $"&totime={totime?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")}"
            + $"&count={count}");
        
        passingcounts = counts;

        StateHasChanged();
    }

    public void Dispose()
    {
        hubConnection.Remove(Strings.Events.NewPassings);
        if (segment != null)
        {
            hubConnection.InvokeAsync("RemoveFromTimingLoopGroup", segment.EndId);
        }
    }
}
        