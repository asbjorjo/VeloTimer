@using VeloTimer.Shared.Hub
@using VeloTimer.Shared.Models
@inherits ComponentBase
@implements IDisposable
@inject IApiClient Api
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection

<MudText Typo="Typo.h6" Color="Color.Inherit" Align="Align.Center">@_heading</MudText>

@if (passingcounts == null)
{
<MudTable Items="@_placeholder" Breakpoint="Breakpoint.None">
    <HeaderContent>
        <MudTh Class="mw-100">Rytter</MudTh>
        <MudTh Style="text-align:right">Runder</MudTh>
        <MudTh Style="text-align:right">km</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Rytter"><MudSkeleton/></MudTd>
        <MudTd Style="text-align:right" DataLabel="Runder"><MudSkeleton/></MudTd>
        <MudTd Style="text-align:right" DataLabel="km"><MudSkeleton/></MudTd>
    </RowTemplate>
    </MudTable>
}
else
{
    <MudTable Items="@passingcounts" Loading="@_loading" LoadingProgressColor="@Color.Info" Breakpoint="Breakpoint.None">
    <HeaderContent>
        <MudTh Class="mw-100">Rytter</MudTh>
        <MudTh Style="text-align:right">Runder</MudTh>
        <MudTh Style="text-align:right">km</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Rider</MudTd>
        <MudTd Style="text-align:right">@context.Count</MudTd>
        <MudTd Style="text-align:right">@String.Format("{0:0.00}", @context.Distance)</MudTd>
    </RowTemplate>
    </MudTable>
}

@code {
    protected long passingcount;
    protected IEnumerable<SegmentDistance> passingcounts;
    private int[] _placeholder = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

    [Parameter]
    public string StatsItem { get; set; }
    [Parameter]
    public long? Transponder { get; set; }
    [Parameter]
    public DateTimeOffset? FromTime { get; set; }
    [Parameter]
    public DateTimeOffset? ToTime { get; set; }
    [Parameter]
    public int? Count { get; set; }
    [Parameter]
    public long? Rider { get; set; }
    [Parameter]
    public string Heading { get; set; }

    protected string statsItem;
    protected long? transponder;
    protected DateTimeOffset? fromtime;
    protected DateTimeOffset? totime;
    protected int count = 10;
    protected long? rider;
    private bool _loading = true;
    private string _heading;

    protected override void OnInitialized()
    {
        hubConnection.On(Strings.Events.NewPassings, async () =>
        {
            await LoadSegmentPassingCount();
        });
    }

    protected async override Task OnParametersSetAsync()
    {
        if (StatsItem != statsItem || Transponder != transponder || Rider != rider) {
            _loading = true;

            statsItem = StatsItem;
            transponder = Transponder;
            fromtime = FromTime;
            totime = ToTime;
            rider = Rider;
            _heading = Heading;

            if (Count.HasValue)
            {
                count = Count.Value;
            }

            await LoadSegmentPassingCount();
        }

    }

    protected async Task LoadSegmentPassingCount()
    {
        _loading = true;

        var counts = await Api.GetCount(StatsItem.ToLower(), fromtime, totime, count);

        passingcounts = counts;

        _loading = false;

        StateHasChanged();
    }

    public void Dispose()
    {
    }
}
