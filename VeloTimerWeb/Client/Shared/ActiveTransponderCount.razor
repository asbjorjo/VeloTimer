@namespace VeloTimerWeb.Client.Shared
@using VeloTimer.Shared.Hub
@using VeloTimer.Shared.Util

@inherits ComponentBase
@inject IApiClient Api
@inject NavigationManager NavigationManager
@inject HubConnection hubConnection

@if (active > 0)
{
    <MudPaper>
        @($"{active} rytter{(active > 1 ? "e" : "")} på banen.")
    </MudPaper>
}
else
{
    <LastPassing/>
}

@code {
    [Parameter]
    public DateTimeOffset FromTime { get; set; } = DateTimeOffset.Now.AddMinutes(-15);
    [Parameter]
    public DateTimeOffset? ToTime { get; set; }

    private int active;
    private DateTimeOffset fromtime;
    private DateTimeOffset? totime;

    protected async override Task OnParametersSetAsync()
    {
        if (FromTime != fromtime || (ToTime.HasValue && ToTime.Value != totime))
        {
            totime = ToTime.HasValue ? ToTime.Value.ToUniversalTime() : null;
            fromtime = FromTime;

            await LoadRiderCount();
        }
    }

    protected async Task LoadRiderCount()
    {
        active = await Api.GetActiveTransponderCount(fromtime, totime);
    }
}
