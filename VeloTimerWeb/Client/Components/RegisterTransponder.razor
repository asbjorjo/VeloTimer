@namespace VeloTimerWeb.Client.Components
@layout MainLayout
@inherits ComponentBase
@using Microsoft.Extensions.Logging
@inject NavigationManager NavigationManager
@inject IApiClient Api
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar SnackBar
@inject ILogger<RegisterTransponder> Logger

<MudGrid>
    <MudItem xs="12">
        <MudTable ServerData="@LoadTransponderNames" Breakpoint="Breakpoint.None" T="TransponderOwnershipWeb" OnRowClick="@ToggleEdit" @ref="_table">
            <HeaderContent>
                <MudTh>Transponder</MudTh>
                <MudTh>Gyldig fra</MudTh>
                <MudTh>Gyldig til</MudTh>
            </HeaderContent>
            <RowTemplate Context="transpondername">
                <MudTd>@transpondername.Transponder.Label</MudTd>
                <MudTd>@transpondername.OwnedFrom.LocalDateTime.ToShortDateString()</MudTd>
                <MudTd>@transpondername.OwnedUntil.LocalDateTime.ToShortDateString()</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudHidden Breakpoint="Breakpoint.None" Invert="true">
                    <MudTablePager/>
                </MudHidden>
            </PagerContent>
            <ChildRowContent Context="transpondername">
                @if (@transpondername.ShowEdit)
                {
                    <MudTr>
                        <MudTd UserAttributes="@(new Dictionary<string, object>{{"colspan","3"}})">
                            @if (transpondername.OwnedFrom < DateTime.UtcNow && transpondername.OwnedUntil >= DateTime.UtcNow.AddMonths(-1))
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add"
                                           OnClick="@(() => ExtendRegistration(@transpondername))">
                                    1 år
                                </MudButton>
                            }
                            <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete"
                                OnClick="@(() => RemoveRegistration(@transpondername))">
                                Slett
                            </MudButton>
                        </MudTd>
                    </MudTr>
                }
            </ChildRowContent>
            <NoRecordsContent>

            </NoRecordsContent>
        </MudTable>
    </MudItem>
    <MudItem xs="12" Class="align-content-end">
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Label="Registrer brikke" OnClick="RegisterNew" />
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private IEnumerable<TransponderOwnershipWeb> transpondernames;
    private ServerValidator serverValidator;
    private string userId;
    private RiderWeb rider;
    private MudTable<TransponderOwnershipWeb> _table;


    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        userId = user.FindFirst(c => c.Type == "sub")?.Value;
        rider = await Api.GetRiderByUserId(userId);

        await base.OnInitializedAsync();
    }

    private async Task RegisterNew()
    {
        var parameters = new DialogParameters { ["transponderownership"] = new TransponderOwnershipWeb { Owner = rider } };

        var dialog = DialogService.Show<TransponderDialog>("Registrer brikke", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task<TableData<TransponderOwnershipWeb>> LoadTransponderNames(TableState state)
    {
        transpondernames = await Http.GetFromJsonAsync<IEnumerable<TransponderOwnershipWeb>>($"rider/{userId}/transponders");

        return new TableData<TransponderOwnershipWeb> { TotalItems = transpondernames.Count(), Items = transpondernames };
    }

    private void ToggleEdit(TableRowClickEventArgs<TransponderOwnershipWeb> transponderName)
    {
        transponderName.Item.ShowEdit = !transponderName.Item.ShowEdit;
    }

    private async void RemoveRegistration(TransponderOwnershipWeb transponderOwnership)
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        await Api.RemoveTransponderRegistration(transponderOwnership);

        SnackBar.Add($"Slettet registrering for brikke {transponderOwnership.Transponder.Label}", MudBlazor.Severity.Error);

        await _table.ReloadServerData();
    }

    private async void ExtendRegistration(TransponderOwnershipWeb transponderOwnership)
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        await Api.ExtendRegistration(transponderOwnership, transponderOwnership.OwnedUntil.AddYears(1));

        SnackBar.Add($"Forlenget registrering for brikke {transponderOwnership.Transponder.Label}", MudBlazor.Severity.Success);

        await _table.ReloadServerData();
    }
}
