@page "/nametransponder"
@layout MainLayout
@inherits ComponentBase
@using Microsoft.Extensions.Logging
@using VeloTimer.Shared.Models
@using VeloTimer.Shared.Util
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject ILogger<NameTransponder> Logger

<AuthorizeView Roles="Admin">
    <Authorized>
        <h3>TransponderName</h3>

        <EditForm Model="@transponderName" OnValidSubmit="@HandleValidSubmit" Context="formcontext">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <label>
                Transponder
                <InputText id="label" @bind-Value="transponderName.TransponderLabel" />
            </label>
            <label>
                Name
                <InputText id="name" @bind-Value="transponderName.Name" />
            </label>

            <label>
                Valid from
                <InputDate id="validFrom" @bind-Value="transponderName.ValidFrom"></InputDate>
            </label>
            <label>
                Valid until
                <InputDate id="validUntil" @bind-Value="transponderName.ValidUntil"></InputDate>
            </label>

            <button type="submit">Save</button>
        </EditForm>

        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Transponder</th>
                    <th>Name</th>
                    <th>From</th>
                    <th>To</th>
                </tr>
            </thead>
            <tbody>
                @if(transpondernames != null)
                {
                    @foreach(var transpondername in transpondernames)
                    {
                        <tr>
                            <td>@(TransponderIdConverter.IdToCode(transpondername.TransponderId))</td>
                            <td>@transpondername.Name</td>
                            <td>@transpondername.ValidFrom.Date.ToShortDateString()</td>
                            <td>@transpondername.ValidUntil.Date.ToShortDateString()</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </Authorized>
</AuthorizeView>

@code {
    private TransponderNameWeb transponderName = new();
    private TransponderName[] transpondernames;

    protected override Task OnInitializedAsync()
    {
        return LoadTransponderNames();
    }

    private async Task LoadTransponderNames()
    {
        transpondernames = await Http.GetFromJsonAsync<TransponderName[]>($"/transpondernames");
    }

    private async void HandleValidSubmit()
    {
        var transponderId = TransponderIdConverter.CodeToId(transponderName.TransponderLabel);

        TransponderName name = new TransponderName 
        { 
            TransponderId = transponderId, 
            Name = transponderName.Name,
            ValidFrom = transponderName.ValidFrom,
            ValidUntil = transponderName.ValidUntil
        };

        var result = await Http.PostAsJsonAsync("transpondernames", name);
        if (result.IsSuccessStatusCode)
        {
            await LoadTransponderNames();
            StateHasChanged();            
        }
        else
        {
            Console.WriteLine($"{result.StatusCode}");
        }
    }
}
