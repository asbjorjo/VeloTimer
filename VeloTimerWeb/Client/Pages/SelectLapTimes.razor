@page "/segmenttimes"
@layout MainLayout
@using VeloTimer.Shared.Models
@inject NavigationManager NavigationManager
@inject HttpClient Http

<h3>Segment Times</h3>

@if (timingloops == null)
{
    <p>Loading...</p>
}
else
{
    <select @onchange="ChangeStartLoop">
        @foreach (var timingloop in timingloops)
        {
            <option value="@timingloop.Id">@timingloop.Description</option>
        }
    </select>
    <select @onchange="ChangeEndLoop">
        @foreach (var timingloop in timingloops)
        {
            <option value="@timingloop.Id">@timingloop.Description</option>
        }
    </select>

    <SegmentTimes Start="startloop" End="endloop"/>
}

@code {
    private TimingLoop[] timingloops;
    private long startloop;
    private long endloop;

    protected override async Task OnInitializedAsync()
    {
        timingloops = await Http.GetFromJsonAsync<TimingLoop[]>("/timingloops");
        startloop = timingloops.First().Id;
        endloop = startloop;
    }

    private void ChangeStartLoop(ChangeEventArgs e)
    {
        var start = int.Parse(e.Value.ToString());
        startloop = timingloops.Where(t => t.Id == start).Single().Id;
    }

    private void ChangeEndLoop(ChangeEventArgs e)
    {
        var finish = int.Parse(e.Value.ToString());
        endloop = timingloops.Where(t => t.Id == finish).Single().Id;
    }
}