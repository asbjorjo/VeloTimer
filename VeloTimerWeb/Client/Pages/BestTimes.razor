@page "/rider/besttimes"
@using VeloTimer.Shared.Models
@layout MainLayout
@inject IApiClient Api

    <div class="row">
        <div class="col">
            <h3>Mine bestetider</h3>
        </div>
    </div>
    
@if (rider != null)
{
    <div class="row">
        <div class="col">
            <div class="row text-center">
                <div class="col">
                    <h4>Runde</h4>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <FastestSegmentTimes StatsItem=Runde FromTime=DateTimeOffset.MinValue Count=10 Rider=@rider.UserId />
                </div>
            </div>
        </div>
        <div class="w-100 d-lg-none"></div>
        <div class="col">
            <div class="row text-center">
                <div class="col">
                    <h4>200 meter</h4>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <FastestSegmentTimes StatsItem=200m FromTime=DateTimeOffset.MinValue Count=10 Rider=@rider.UserId />
                </div>
            </div>
        </div>
    </div>  
    <div class="row">
        <div class="col">
            <div class="row text-center">
                <div class="col">
                    <h4>3000 meter</h4>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <FastestSegmentTimes StatsItem=3000m FromTime=DateTimeOffset.MinValue Count=10 Rider=@rider.UserId />
                </div>
            </div>
        </div>
        <div class="w-100 d-lg-none"></div>
        <div class="col">
            <div class="row text-center">
                <div class="col">
                    <h4>4000 meter</h4>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <FastestSegmentTimes StatsItem=4000m FromTime=DateTimeOffset.MinValue Count=10 Rider=@rider.UserId />
                </div>
            </div>
        </div>
    </div>
}

@code{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private RiderWeb rider;

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            rider = await Api.GetRiderByUserId(user.FindFirst(c => c.Type == "sub")?.Value);
        }
    }

}
