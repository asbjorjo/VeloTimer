@page "/rider/besttimes"

@layout MainLayout
@inject IApiClient Api

<MudContainer>
<MudText Typo="Typo.h5" Color="Color.Inherit" Align="Align.Center">Mine bestetider</MudText>

@if (rider != null)
{
    <MudGrid>
        <MudItem xs=12 lg=6>
            <FastestSegmentTimes StatsItem=Runde FromTime=DateTimeOffset.MinValue Count=10 Rider=@rider.UserId />
        </MudItem>
        <MudItem xs=12 lg=6>
            <FastestSegmentTimes StatsItem=200m FromTime=DateTimeOffset.MinValue Count=10 Rider=@rider.UserId />
        </MudItem>
        <MudItem xs=12 lg=6>
            <FastestSegmentTimes StatsItem=1000m FromTime=DateTimeOffset.MinValue Count=10 Rider=@rider.UserId />
        </MudItem>
        <MudItem xs=12 lg=6>
            <FastestSegmentTimes StatsItem=3000m FromTime=DateTimeOffset.MinValue Count=10 Rider=@rider.UserId />
        </MudItem>
        <MudItem xs=12 lg=6>
            <FastestSegmentTimes StatsItem=4000m FromTime=DateTimeOffset.MinValue Count=10 Rider=@rider.UserId />        
        </MudItem>
    </MudGrid>    
}
</MudContainer>

@code{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private RiderWeb rider;

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            rider = await Api.GetRiderByUserId(user.FindFirst(c => c.Type == "sub")?.Value);
        }
    }

}
