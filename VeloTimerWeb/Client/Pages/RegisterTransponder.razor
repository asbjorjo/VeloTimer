@page "/registertransponder"
@layout MainLayout
@inherits ComponentBase
@using Microsoft.Extensions.Logging
@using VeloTimer.Shared.Models
@inject NavigationManager NavigationManager
@inject IApiClient Api
@inject HttpClient Http
@inject ILogger<RegisterTransponder> Logger

<AuthorizeView>
    <Authorized>
        <h3>Registrer transponder</h3>

        <EditForm Model="@transponderName" OnValidSubmit="@HandleValidSubmit" Context="formcontext">
            <DataAnnotationsValidator />
            <ServerValidator @ref="serverValidator" />
            <ValidationSummary />

            <div class="form-row">
                <label for="label" class="col-1 col-form-label">
                    Transponder
                </label>
                <InputText id="label" @bind-Value="transponderName.TransponderLabel" class="form-control" />
            </div>
            <div class="form-row">
                <div class="col">
                    <label for="validFrom">
                        Gyldig fra
                    </label>
                    <InputDate id="validFrom" @bind-Value="transponderName.OwnedFrom" class="form-control" />
                </div>
                <div class="col">
                    <label for="validUntil">
                        Gyldig til
                    </label>
                    <InputDate id="validUntil" @bind-Value="transponderName.OwnedUntil" class="form-control" />
                </div>
            </div>
            <div class="form-row">
                <InputText id="name" @bind-Value="transponderName.Owner" hidden="true" />
                <button class="btn btn-primary" type="submit">Registrer</button>
                <button class="btn btn-secondary" type="reset" @onclick="@ResetForm" @onclick:preventDefault>Nullstill</button>
            </div>
        </EditForm>
        <div class="w-100" />
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Transponder</th>
                    <th>Gyldig fra</th>
                    <th>Gyldig til</th>
                    <th>Slett registrering</th>
                </tr>
            </thead>
            <tbody>
                @if(transpondernames != null)
                {
                    @foreach(var transpondername in transpondernames)
                    {
                        <tr>
                            <td>@transpondername.TransponderLabel</td>
                            <td>@transpondername.OwnedFrom.LocalDateTime.ToShortDateString()</td>
                            <td>@transpondername.OwnedUntil.LocalDateTime.ToShortDateString()</td>
                            <td>
                                <button class="btn btn-danger"
                                    value="@transpondername.TransponderLabel" 
                                    @onclick="@(e => 
                                        RemoveRegistration(e, transpondername.TransponderLabel, transpondername.OwnedFrom, transpondername.OwnedUntil))">
                                    Slett
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private TransponderOwnershipWebForm transponderName = new();
    private IEnumerable<TransponderOwnershipWeb> transpondernames;
    private ServerValidator serverValidator;
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(c => c.Type == "sub")?.Value;
            transponderName.Owner = userId;
        }

        await LoadTransponderNames();
    }

    private async Task LoadTransponderNames()
    {
        transpondernames = await Http.GetFromJsonAsync<IEnumerable<TransponderOwnershipWeb>>($"rider/{transponderName.Owner}/transponders");
    }

    private async void HandleValidSubmit()
    {
        var result = await Http.PostAsJsonAsync($"rider/{transponderName.Owner}/transponders", transponderName);
        if (result.IsSuccessStatusCode)
        {
            await LoadTransponderNames();
            StateHasChanged();            
        }
        else
        {
            serverValidator.Validate(result, transponderName);
            Console.WriteLine($"{result.StatusCode}");
        }
    }

    private void ResetForm()
    {
        transponderName = new();
        transponderName.Owner = userId;
    }

    private async void RemoveRegistration(EventArgs e, string label, DateTimeOffset from, DateTimeOffset until)
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        await Api.RemoveTransponderRegistration(userId, label, from, until);

        await LoadTransponderNames();
        StateHasChanged();
    }
}
