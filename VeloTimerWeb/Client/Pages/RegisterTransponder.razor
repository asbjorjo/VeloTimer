@page "/registertransponder"
@layout MainLayout
@inherits ComponentBase
@using Microsoft.Extensions.Logging
@using VeloTimer.Shared.Models
@inject NavigationManager NavigationManager
@inject IApiClient Api
@inject HttpClient Http
@inject ILogger<RegisterTransponder> Logger

<AuthorizeView>
    <Authorized>
        <MudText Typo="Typo.h5" Color="Color.Inherit" Align="Align.Center"></MudText>
        
        <EditForm Model="@transponderName" OnValidSubmit="@HandleValidSubmit" Context="formcontext">
            <DataAnnotationsValidator />
            <ServerValidator @ref="serverValidator" />
            <ValidationSummary />
            <MudCard>
                <MudCardHeader>
                    Registrer transponder
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField @bind-Value="transponderName.TransponderLabel" Label="Transponder" For="@(() => transponderName.TransponderLabel)"></MudTextField>
                    <MudField Label="Gyldighet">
                        <MudDatePicker @bind-Date="transponderName.OwnedFrom" Label="Gyldig fra" For="@(() => transponderName.OwnedFrom)"></MudDatePicker>
                        <MudDatePicker @bind-Date="transponderName.OwnedUntil" Label="Gyldig til" For="@(() => transponderName.OwnedUntil)"/>
                    </MudField>
                    <MudHidden Breakpoint="Breakpoint.None" Invert="true">
                        <MudTextField @bind-Value="transponderName.Owner" ReadOnly="true" For="@(() => transponderName.Owner)"/>
                    </MudHidden>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary">Registrer</MudButton>
                    <MudButton ButtonType="ButtonType.Reset" Variant="Variant.Filled" Color="Color.Secondary" OnClick="@ResetForm">Nullstill</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
        
        <MudTable Items="@transpondernames" Breakpoint="Breakpoint.None" T="TransponderOwnershipWeb" OnRowClick="@ToggleEdit">
            <HeaderContent>
                <MudTh>Transponder</MudTh>
                <MudTh>Gyldig fra</MudTh>
                <MudTh>Gyldig til</MudTh>
            </HeaderContent>
            <RowTemplate Context="transpondername">
                <MudTd>@transpondername.TransponderLabel</MudTd>
                <MudTd>@transpondername.OwnedFrom.LocalDateTime.ToShortDateString()</MudTd>
                <MudTd>@transpondername.OwnedUntil.LocalDateTime.ToShortDateString()</MudTd>
            </RowTemplate>
            <ChildRowContent Context="transpondername">
                @if (@transpondername.ShowEdit)
                {
                    <MudTr>
                        <MudTd UserAttributes="@(new Dictionary<string, object>{{"colspan","3"}})">
                            <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete"
                                OnClick="@(() => RemoveRegistration(transpondername.TransponderLabel, transpondername.OwnedFrom, transpondername.OwnedFrom))">
                                Slett
                            </MudButton>
                        </MudTd>
                    </MudTr>
                }
            </ChildRowContent>
        </MudTable>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private TransponderOwnershipWebForm transponderName = new();
    private IEnumerable<TransponderOwnershipWeb> transpondernames;
    private ServerValidator serverValidator;
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(c => c.Type == "sub")?.Value;
            transponderName.Owner = userId;
        }

        await LoadTransponderNames();
    }

    private async Task LoadTransponderNames()
    {
        transpondernames = await Http.GetFromJsonAsync<IEnumerable<TransponderOwnershipWeb>>($"rider/{transponderName.Owner}/transponders");
    }

    private async void HandleValidSubmit()
    {
        var result = await Http.PostAsJsonAsync($"rider/{transponderName.Owner}/transponders", transponderName);
        if (result.IsSuccessStatusCode)
        {
            await LoadTransponderNames();
            StateHasChanged();            
        }
        else
        {
            serverValidator.Validate(result, transponderName);
            Console.WriteLine($"{result.StatusCode}");
        }
    }

    private void ToggleEdit(TableRowClickEventArgs<TransponderOwnershipWeb> transponderName)
    {
        transponderName.Item.ShowEdit = !transponderName.Item.ShowEdit;
    }

    private void ResetForm()
    {
        transponderName = new();
        transponderName.Owner = userId;
    }

    private async void RemoveRegistration(string label, DateTimeOffset from, DateTimeOffset until)
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        await Api.RemoveTransponderRegistration(userId, label, from, until);

        await LoadTransponderNames();
        StateHasChanged();
    }
}
