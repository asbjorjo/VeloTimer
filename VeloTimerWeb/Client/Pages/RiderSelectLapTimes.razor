@page "/rider/times"
@page "/rider/times/{Label}"
@page "/rider/times/{Label}/{Track}"
@page "/rider/times/{Label}/{Track}/{Layout}"
@layout MainLayout
@using System.Text
@inject NavigationManager NavigationManager
@inject IApiClient Api
@inject HttpClient Http

<MudText Typo="Typo.h5" Color="Color.Inherit" Align="Align.Center">Mine passeringstider</MudText>

@if (_rider == null)
{
    <p>Laster...</p>
}
else
{
    <SegmentTimes @bind-StatisticsParameters="@StatisticsParameters" Rider=@_rider />
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public string Track { get; set; }
    [Parameter]
    public string Layout { get; set; }

    private StatisticsParameters StatisticsParameters
    {
        get 
        {
            return _statisticsParameters;
        }
        set
        {
            _statisticsParameters = value;
            UpdateNavigation();
        }
    }

    private StatisticsParameters _statisticsParameters;
    private string _rider;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        StatisticsParameters = new StatisticsParameters
        {
            Label = Label,
            Track = Track,
            Layout = Layout
        };
    }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        _rider = user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private void UpdateNavigation()
    {
        var sb = new StringBuilder("rider/times/");

        sb.Append(_statisticsParameters.ToPathString());

        NavigationManager.NavigateTo(sb.ToString());
    }
}
