@page "/transpondertimes"
@layout MainLayout
@using VeloTimer.Shared.Models
@using VeloTimer.Shared.Util
@inject NavigationManager NavigationManager
@inject HttpClient Http

<h3>TransponderTimes</h3>

@if (transponders == null)
{
    <p>Loading...</p>
}
else
{
    <select @onchange="ChangeTransponder">
        @foreach (var transponder in transponders)
        {
            <option value="@transponder.Id">@TransponderIdConverter.IdToCode(transponder.Id)</option>
        }
    </select>

    if (segments == null)
    {
        <p>Loading....</p>
    }
    else
    {
        <select @onchange="ChangeSegment">
            @foreach (var segment in segments)
            {
                <option value="@segment.Id">@segment.Label</option>
            }
        </select>
        
        <table class="table">
            <thead>
                <tr>
                    <th>Rider</th>
                    <th>Laptime</th>
                    <th>Speed</th>
                </tr>
            </thead>
            <tbody>
                @if (transponder != null && segmenttimes != null)
                {
                    @foreach (var day in segmenttimes.GroupBy(s => s.PassingTime.Date))
                    {
                        <tr><td colspan="3" align="center">@day.Key.ToShortDateString()</td></tr>
                        @foreach (var segment in day)
                        {
                        <tr>
                            <td>@segment.Rider</td>
                            <td>@String.Format("{0:00.000}", segment.Segmenttime)</td>
                            <td>@String.Format("{0:00.000}", segment.Segmentspeed)</td>
                        </tr>
                            }
                        }
                }
            </tbody>
        </table>
    }
}

@code {
    private Transponder transponder;
    private Transponder[] transponders;
    private Segment[] segments;
    private SegmentTimeRider[] segmenttimes;
    private long segment;

    protected override async Task OnInitializedAsync()
    {
        transponders = await Http.GetFromJsonAsync<Transponder[]>("/transponders");
        segments = await Http.GetFromJsonAsync<Segment[]>("/segments");

        transponder = transponders.First();
        segment = segments.First().Id;

        await LoadSegmentTimes();
    }

    private async void ChangeTransponder(ChangeEventArgs e)
    {
        var start = long.Parse(e.Value.ToString());
        transponder = transponders.Where(t => t.Id == start).Single();
        await LoadSegmentTimes();
    }

    private async void ChangeSegment(ChangeEventArgs e)
    {
        var selected = int.Parse(e.Value.ToString());
        segment = segments.Where(s => s.Id == selected).Single().Id;

        await LoadSegmentTimes();
    }

    protected async Task LoadSegmentTimes()
    {
        segmenttimes = await Http.GetFromJsonAsync<SegmentTimeRider[]>($"/segmenttimes?segmentId={segment}&transponderid={transponder.Id}");

        StateHasChanged();
    }
}
