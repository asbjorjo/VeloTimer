@page "/transpondertimes"
@layout MainLayout
@using VeloTimer.Shared.Models
@using VeloTimer.Shared.Util
@inject NavigationManager NavigationManager
@inject HttpClient Http

<h3>TransponderTimes</h3>

@if (transponders == null)
{
    <p>Loading...</p>
}
else
{
    <select @onchange="ChangeTransponder">
        @foreach (var transponder in transponders)
        {
            <option value="@transponder.Id">@TransponderIdConverter.IdToCode(transponder.Id)</option>
        }
    </select>

    if (segments == null)
    {
        <p>Loading....</p>
    }
    else
    {
        <select @onchange="ChangeSegment">
            @foreach (var segment in segments)
            {
                <option value="@segment.Id">@segment.Label</option>
            }
        </select>

        @for (var date = totime; date > fromtime; date -= TimeSpan.FromDays(1))
        {
            var dayindex = DayNumber(fromtime, date) - 1;
            <div>
                <div class="text-lg-center font-weight-bold" @onclick="() => ToggleShowDay(dayindex)">@date.ToShortDateString()</div>
                @if (showdays[dayindex]) {
                    <SegmentTimes Segment=segment Transponder=transponder.Id FromTime=date Period=TimeSpan.FromDays(1) ShowIntermediate=true />
                }
            </div>
        }
    }
}

@code {
    private Transponder transponder;
    private Transponder[] transponders;
    private Segment[] segments;
    private long segment;
    private DateTime fromtime = DateTime.Now.Date - TimeSpan.FromDays(7);
    private DateTime totime = DateTime.Now.Date;
    private bool[] showdays;

    protected override async Task OnInitializedAsync()
    {
        transponders = await Http.GetFromJsonAsync<Transponder[]>("/transponders");
        segments = await Http.GetFromJsonAsync<Segment[]>("/segments");

        showdays = new bool[(totime-fromtime).Days];
        Array.Fill(showdays, false);

        transponder = transponders.First();
        segment = segments.First().Id;
    }

    private void ChangeTransponder(ChangeEventArgs e)
    {
        var start = long.Parse(e.Value.ToString());
        transponder = transponders.Where(t => t.Id == start).Single();
    }

    private void ChangeSegment(ChangeEventArgs e)
    {
        var selected = int.Parse(e.Value.ToString());
        segment = segments.Where(s => s.Id == selected).Single().Id;
    }

    private int DayNumber(DateTime start, DateTime end)
    {
        return (end - start).Days;
    }

    private void ToggleShowDay(int day)
    {
        showdays[day] = !showdays[day];
    }
}
